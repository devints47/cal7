name: üöÄ Publish Package

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  # Check if this push came from merging develop branch
  check-source:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      version_type: ${{ steps.determine_version.outputs.version_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if merge from develop or manual trigger
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "Manual workflow trigger detected"
          else
            # Check if the commit message indicates a merge from develop
            if git log -1 --pretty=format:"%s" | grep -E "(Merge.*develop|merge.*develop)" || \
               git log -1 --pretty=format:"%b" | grep -E "(develop|feat:|fix:|BREAKING CHANGE:)"; then
              echo "should_publish=true" >> $GITHUB_OUTPUT
              echo "Merge from develop or conventional commit detected"
            else
              echo "should_publish=false" >> $GITHUB_OUTPUT
              echo "Not a merge from develop, skipping publish"
            fi
          fi

      - name: Determine version type
        id: determine_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version_type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Determine version type from commit messages
            if git log -1 --pretty=format:"%s %b" | grep -i "BREAKING CHANGE:" || \
               git log -1 --pretty=format:"%s" | grep -E "^feat\!|^fix\!|^perf\!"; then
              echo "version_type=major" >> $GITHUB_OUTPUT
              echo "Breaking change detected - major version"
            elif git log -1 --pretty=format:"%s" | grep -E "^feat\(|^feat:"; then
              echo "version_type=minor" >> $GITHUB_OUTPUT
              echo "Feature detected - minor version"
            else
              echo "version_type=patch" >> $GITHUB_OUTPUT
              echo "Patch/fix detected - patch version"
            fi
          fi

  # Run tests before publishing
  test:
    runs-on: ubuntu-latest
    needs: check-source
    if: needs.check-source.outputs.should_publish == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --run

      - name: Run build
        run: npm run build:prod

  # Publish to npm and create GitHub release
  publish:
    runs-on: ubuntu-latest
    needs: [check-source, test]
    if: needs.check-source.outputs.should_publish == 'true'
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: version
        run: |
          VERSION_TYPE="${{ needs.check-source.outputs.version_type }}"
          echo "Bumping version: $VERSION_TYPE"
          
          # Bump version and capture the new version
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
          # Extract version without 'v' prefix for later use
          CLEAN_VERSION=${NEW_VERSION#v}
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        run: npm run build:prod

      - name: Create and push git tag
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git tag ${{ steps.version.outputs.new_version }}
          git push origin main
          git push origin ${{ steps.version.outputs.new_version }}

      - name: Generate changelog for this release
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog content
          CHANGELOG="## Changes in ${{ steps.version.outputs.new_version }}

          $COMMITS

          ### Package Info
          - **Framework**: Next.js 13+ (primary target)
          - **Size**: ~50KB gzipped
          - **Dependencies**: React 18+, Next.js 12+
          
          ### Installation
          \`\`\`bash
          npm install cal7@${{ steps.version.outputs.clean_version }}
          \`\`\`"
          
          # Save to file and environment
          echo "$CHANGELOG" > release_notes.md
          echo "changelog_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing to npm..."
          npm publish --access public
          echo "‚úÖ Successfully published cal7@${{ steps.version.outputs.clean_version }} to npm"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: 'Cal7 ${{ steps.version.outputs.new_version }}'
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.new_version, 'alpha') || contains(steps.version.outputs.new_version, 'beta') || contains(steps.version.outputs.new_version, 'rc') }}

      - name: Success notification
        run: |
          echo "üéâ Successfully published Cal7 ${{ steps.version.outputs.new_version }}!"
          echo "üì¶ npm: https://www.npmjs.com/package/cal7"
          echo "üè∑Ô∏è GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }}"

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [check-source, test, publish]
    if: failure() && needs.check-source.outputs.should_publish == 'true'
    steps:
      - name: Failure notification
        run: |
          echo "‚ùå Publication failed!"
          echo "Check the workflow logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 